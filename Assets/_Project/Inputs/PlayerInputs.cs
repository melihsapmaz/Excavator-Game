//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/_Project/Inputs/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""P1"",
            ""id"": ""3621ad09-09de-4214-973c-9e5b939227e4"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""69ea36fa-5530-44b7-ae9b-641f58f19f2e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pick Load"",
                    ""type"": ""Button"",
                    ""id"": ""10a9c741-febc-48c3-8c10-8d1b945f81b8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Arm1Control"",
                    ""type"": ""Value"",
                    ""id"": ""1e204dbb-2a21-4aaa-ad02-e8a8979c3947"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Arm2Control"",
                    ""type"": ""Value"",
                    ""id"": ""9189393b-ea5f-4079-8660-130916ef96c3"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""9636343e-5c21-4bc9-9623-7d18393c7e02"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""00f8c340-8a61-4825-8544-20b16a18acbc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5aee9d5c-7050-444d-a4ea-26247783ab7e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1f552716-41a7-4993-8f71-bbf69073b53c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e2836acd-4ee4-430c-a565-7bc8056ae1cf"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""38875cf8-0504-4afe-89bb-7eb34512c98b"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""Pick Load"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""28491fc9-73d5-450e-8ed1-84b99ef99efc"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arm1Control"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c5cd3400-6154-4075-b005-1c12c485f4ad"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""Arm1Control"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""38625ae3-255b-48fd-8dad-6e8a93ad6feb"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""Arm1Control"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""29e9e130-044e-4315-8890-2178cc8e9d30"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arm2Control"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8a99b01b-d8e3-4f99-b993-8bce2ce16527"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""Arm2Control"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""81142a8a-32a4-4269-ba24-6f26687f905a"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""Arm2Control"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""P2"",
            ""id"": ""160d4157-9c0f-47e7-bce4-a98efd5a318b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ca408d7c-b842-4c2e-9690-3d328a034fab"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pick Load"",
                    ""type"": ""Button"",
                    ""id"": ""e1a09bb3-ab3a-41f0-82ee-127fa598f5c4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Arm1Control"",
                    ""type"": ""Value"",
                    ""id"": ""8da6562f-5795-47f5-93eb-60b9d8a8a1aa"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Arm2Control"",
                    ""type"": ""Value"",
                    ""id"": ""0267cf86-10c1-4a2f-8369-617927de6fa8"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrows"",
                    ""id"": ""5bca562d-2675-474f-b120-ee80bd77b3ea"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""25fc29c3-97fc-4365-a110-0b24ef48f4f8"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b1ea373b-d214-4a19-b6ad-3862c4325ef6"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""034f226f-6299-40cc-bc5e-01d010ea0bf4"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5d2e393f-79b3-46e8-b87e-b571a99ff85b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""eb854f65-ed66-4d38-8e0c-4c7fd05eeb7c"",
                    ""path"": ""<Keyboard>/numpad0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""Pick Load"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""e6e3cc85-72bb-4743-9640-a0610f22c882"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arm1Control"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""73d16cd4-a017-4034-9c68-bce4179b0bec"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""Arm1Control"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4bedaa2c-1fcb-4b99-8066-28c12ac73489"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""Arm1Control"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""116a95ad-f098-4d52-a664-ecfae8cbd037"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arm2Control"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""09505001-2e6c-4dba-a407-8b4ee1c11cc9"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""Arm2Control"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""65443add-d8c0-4e41-93dd-90fd04421adc"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""Arm2Control"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // P1
        m_P1 = asset.FindActionMap("P1", throwIfNotFound: true);
        m_P1_Move = m_P1.FindAction("Move", throwIfNotFound: true);
        m_P1_PickLoad = m_P1.FindAction("Pick Load", throwIfNotFound: true);
        m_P1_Arm1Control = m_P1.FindAction("Arm1Control", throwIfNotFound: true);
        m_P1_Arm2Control = m_P1.FindAction("Arm2Control", throwIfNotFound: true);
        // P2
        m_P2 = asset.FindActionMap("P2", throwIfNotFound: true);
        m_P2_Move = m_P2.FindAction("Move", throwIfNotFound: true);
        m_P2_PickLoad = m_P2.FindAction("Pick Load", throwIfNotFound: true);
        m_P2_Arm1Control = m_P2.FindAction("Arm1Control", throwIfNotFound: true);
        m_P2_Arm2Control = m_P2.FindAction("Arm2Control", throwIfNotFound: true);
    }

    ~@PlayerInputs()
    {
        UnityEngine.Debug.Assert(!m_P1.enabled, "This will cause a leak and performance issues, PlayerInputs.P1.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_P2.enabled, "This will cause a leak and performance issues, PlayerInputs.P2.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // P1
    private readonly InputActionMap m_P1;
    private List<IP1Actions> m_P1ActionsCallbackInterfaces = new List<IP1Actions>();
    private readonly InputAction m_P1_Move;
    private readonly InputAction m_P1_PickLoad;
    private readonly InputAction m_P1_Arm1Control;
    private readonly InputAction m_P1_Arm2Control;
    public struct P1Actions
    {
        private @PlayerInputs m_Wrapper;
        public P1Actions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_P1_Move;
        public InputAction @PickLoad => m_Wrapper.m_P1_PickLoad;
        public InputAction @Arm1Control => m_Wrapper.m_P1_Arm1Control;
        public InputAction @Arm2Control => m_Wrapper.m_P1_Arm2Control;
        public InputActionMap Get() { return m_Wrapper.m_P1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(P1Actions set) { return set.Get(); }
        public void AddCallbacks(IP1Actions instance)
        {
            if (instance == null || m_Wrapper.m_P1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_P1ActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @PickLoad.started += instance.OnPickLoad;
            @PickLoad.performed += instance.OnPickLoad;
            @PickLoad.canceled += instance.OnPickLoad;
            @Arm1Control.started += instance.OnArm1Control;
            @Arm1Control.performed += instance.OnArm1Control;
            @Arm1Control.canceled += instance.OnArm1Control;
            @Arm2Control.started += instance.OnArm2Control;
            @Arm2Control.performed += instance.OnArm2Control;
            @Arm2Control.canceled += instance.OnArm2Control;
        }

        private void UnregisterCallbacks(IP1Actions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @PickLoad.started -= instance.OnPickLoad;
            @PickLoad.performed -= instance.OnPickLoad;
            @PickLoad.canceled -= instance.OnPickLoad;
            @Arm1Control.started -= instance.OnArm1Control;
            @Arm1Control.performed -= instance.OnArm1Control;
            @Arm1Control.canceled -= instance.OnArm1Control;
            @Arm2Control.started -= instance.OnArm2Control;
            @Arm2Control.performed -= instance.OnArm2Control;
            @Arm2Control.canceled -= instance.OnArm2Control;
        }

        public void RemoveCallbacks(IP1Actions instance)
        {
            if (m_Wrapper.m_P1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IP1Actions instance)
        {
            foreach (var item in m_Wrapper.m_P1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_P1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public P1Actions @P1 => new P1Actions(this);

    // P2
    private readonly InputActionMap m_P2;
    private List<IP2Actions> m_P2ActionsCallbackInterfaces = new List<IP2Actions>();
    private readonly InputAction m_P2_Move;
    private readonly InputAction m_P2_PickLoad;
    private readonly InputAction m_P2_Arm1Control;
    private readonly InputAction m_P2_Arm2Control;
    public struct P2Actions
    {
        private @PlayerInputs m_Wrapper;
        public P2Actions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_P2_Move;
        public InputAction @PickLoad => m_Wrapper.m_P2_PickLoad;
        public InputAction @Arm1Control => m_Wrapper.m_P2_Arm1Control;
        public InputAction @Arm2Control => m_Wrapper.m_P2_Arm2Control;
        public InputActionMap Get() { return m_Wrapper.m_P2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(P2Actions set) { return set.Get(); }
        public void AddCallbacks(IP2Actions instance)
        {
            if (instance == null || m_Wrapper.m_P2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_P2ActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @PickLoad.started += instance.OnPickLoad;
            @PickLoad.performed += instance.OnPickLoad;
            @PickLoad.canceled += instance.OnPickLoad;
            @Arm1Control.started += instance.OnArm1Control;
            @Arm1Control.performed += instance.OnArm1Control;
            @Arm1Control.canceled += instance.OnArm1Control;
            @Arm2Control.started += instance.OnArm2Control;
            @Arm2Control.performed += instance.OnArm2Control;
            @Arm2Control.canceled += instance.OnArm2Control;
        }

        private void UnregisterCallbacks(IP2Actions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @PickLoad.started -= instance.OnPickLoad;
            @PickLoad.performed -= instance.OnPickLoad;
            @PickLoad.canceled -= instance.OnPickLoad;
            @Arm1Control.started -= instance.OnArm1Control;
            @Arm1Control.performed -= instance.OnArm1Control;
            @Arm1Control.canceled -= instance.OnArm1Control;
            @Arm2Control.started -= instance.OnArm2Control;
            @Arm2Control.performed -= instance.OnArm2Control;
            @Arm2Control.canceled -= instance.OnArm2Control;
        }

        public void RemoveCallbacks(IP2Actions instance)
        {
            if (m_Wrapper.m_P2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IP2Actions instance)
        {
            foreach (var item in m_Wrapper.m_P2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_P2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public P2Actions @P2 => new P2Actions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IP1Actions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnPickLoad(InputAction.CallbackContext context);
        void OnArm1Control(InputAction.CallbackContext context);
        void OnArm2Control(InputAction.CallbackContext context);
    }
    public interface IP2Actions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnPickLoad(InputAction.CallbackContext context);
        void OnArm1Control(InputAction.CallbackContext context);
        void OnArm2Control(InputAction.CallbackContext context);
    }
}
